using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace euler_oiler
{
    public class EulerSolver
    {
        /* 
            PROBLEM ONE
            If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
            The sum of these multiples is 23.

            Find the sum of all the multiples of 3 or 5 below 1000.
        */
        public string SolveProblemOne()
        {
            int sumTotal = 0;

            for (int i = 0; i <1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    sumTotal += i;
                }
            }

            return sumTotal.ToString();
        }

        /*
            Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        
            By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

            By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
            find the sum of the even-valued terms.
        */
        public string SolveProblemTwo()
        {
            int total = 0;
            int currentFibNum = 1;
            int previousFibNum = 0;

            while (currentFibNum < 4000000) {
                if (currentFibNum % 2 == 0)
                {
                    total += currentFibNum;
                }

                var oldPrevValue = previousFibNum;
                previousFibNum = currentFibNum;
                currentFibNum += oldPrevValue;
            }

            return total.ToString();
        }

        /*
            The prime factors of 13195 are 5, 7, 13 and 29.

            What is the largest prime factor of the number 600851475143 ?
        */
        public string SolveProblemThree()
        {
            long currentDividend = 600851475143;

            long result = MathHelper.GetHighestPrimeFactor(currentDividend);

            return result.ToString();
        }

        /*
            A palindromic number reads the same both ways. 
            The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

            Find the largest palindrome made from the product of two 3-digit numbers.
        */
        public string SolveProblemFour()
        {
            string result = "0";
            int max = 999;
            int min = 100;

            for (int i = 999; i >= 100; i--)
            {
                for (int j = max; j >= min; j--)
                {
                    var multipleString = (i * j).ToString();

                    if (multipleString.Length == 5)
                    {
                        if (multipleString[0] == multipleString[4] 
                            && multipleString[1] == multipleString[3])
                        {
                            if (int.Parse(result) < int.Parse(multipleString))
                            {
                                result = multipleString;
                                max = i;
                                min = j;
                            }
                            break;
                        }
                    }

                    if (multipleString.Length == 6)
                    {
                        if (multipleString[0] == multipleString[5] 
                            && multipleString[1] == multipleString[4] 
                            && multipleString[2] == multipleString[3])
                        {
                            if (int.Parse(result) < int.Parse(multipleString))
                            {
                                result = multipleString;
                                max = i;
                                min = j;
                            }
                            break;
                        }
                    }
                }
            }
            return result;
        }

        /*
            2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

            What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        */
        public string SolveProblemFive()
        {
            var result = string.Empty;
            var currentNum = 2520;

            var numbersToCheck = new List<int>() { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };

            while (result == string.Empty)
            {
                foreach (var num in numbersToCheck)
                {
                    if (currentNum % num != 0)
                    {
                        break;
                    }

                    if (num == numbersToCheck[numbersToCheck.Count() - 1])
                    {
                        result = currentNum.ToString();
                    }
                }
                
                currentNum++; 
            }

            return result;
        }

        /*
            The sum of the squares of the first ten natural numbers is,

            The square of the sum of the first ten natural numbers is,

            Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is

            (see website for description at: https://projecteuler.net/problem=6).

            Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum. 
        */
        public string SolveProblemSix()
        {
            var numList = new List<int>(Enumerable.Range(1, 100));

            var sumSquare = MathHelper.GetSumOfNatNumSquares(numList);

            var squareSum = MathHelper.GetSquareOfNatNumSums(numList);

            return Math.Abs(sumSquare - squareSum).ToString();
        }

        /*
            By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

            What is the 10 001st prime number?
        */

        public string SolveProblemSeven()
        {
            var primesFound = new List<int>() { 2, 3 };

            int currentSixMultiple = 1;

            int currentSixMultipleModifier = -1;

            while (primesFound.Count() < 10001)
            {
                var currentPrimeCandidate = (6 * currentSixMultiple) + currentSixMultipleModifier;

                var primeFactors = MathHelper.GetPrimeFactors(currentPrimeCandidate);

                if (primeFactors.Distinct().Count() == 2
                        && primeFactors.First() == 1
                        && primeFactors.Last() == currentPrimeCandidate)
                {
                    primesFound.Add(currentPrimeCandidate);
                }

                if (currentSixMultipleModifier == 1)
                {
                    currentSixMultiple += 1;
                }

                currentSixMultipleModifier *= -1;
            }

            return primesFound.Last().ToString();
        }

        /*
            The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

            73167176531330624919225119674426574742355349194934
            96983520312774506326239578318016984801869478851843
            85861560789112949495459501737958331952853208805511
            12540698747158523863050715693290963295227443043557
            66896648950445244523161731856403098711121722383113
            62229893423380308135336276614282806444486645238749
            30358907296290491560440772390713810515859307960866
            70172427121883998797908792274921901699720888093776
            65727333001053367881220235421809751254540594752243
            52584907711670556013604839586446706324415722155397
            53697817977846174064955149290862569321978468622482
            83972241375657056057490261407972968652414535100474
            82166370484403199890008895243450658541227588666881
            16427171479924442928230863465674813919123162824586
            17866458359124566529476545682848912883142607690042
            24219022671055626321111109370544217506941658960408
            07198403850962455444362981230987879927244284909188
            84580156166097919133875499200524063689912560717606
            05886116467109405077541002256983155200055935729725
            71636269561882670428252483600823257530420752963450

            Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
         */

        public string SolveProblemEight()
        {
            int highestProduct = 0;

            int currentEndIndex = 12;

            string numberToParse =
                "73167176531330624919225119674426574742355349194934" +
                "96983520312774506326239578318016984801869478851843" +
                "85861560789112949495459501737958331952853208805511" +
                "12540698747158523863050715693290963295227443043557" +
                "66896648950445244523161731856403098711121722383113" +
                "62229893423380308135336276614282806444486645238749" +
                "30358907296290491560440772390713810515859307960866" +
                "70172427121883998797908792274921901699720888093776" +
                "65727333001053367881220235421809751254540594752243" +
                "52584907711670556013604839586446706324415722155397" +
                "53697817977846174064955149290862569321978468622482" +
                "83972241375657056057490261407972968652414535100474" +
                "82166370484403199890008895243450658541227588666881" +
                "16427171479924442928230863465674813919123162824586" +
                "17866458359124566529476545682848912883142607690042" +
                "24219022671055626321111109370544217506941658960408" +
                "07198403850962455444362981230987879927244284909188" +
                "84580156166097919133875499200524063689912560717606" +
                "05886116467109405077541002256983155200055935729725" +
                "71636269561882670428252483600823257530420752963450";

            while (currentEndIndex <= numberToParse.Length - 1)
            {
                var listOfNums = new List<int>();

                for (int i = 12; i >= 0; i--)
                {
                    listOfNums.Add(Convert.ToInt32(numberToParse.Substring(currentEndIndex - i, 1)));
                }

                var currentProduct = listOfNums.Aggregate((x, y) => x * y);

                if (currentProduct > highestProduct)
                {
                    highestProduct = currentProduct;
                }

                currentEndIndex++;
            }

            return highestProduct.ToString();
        }
    }
}
