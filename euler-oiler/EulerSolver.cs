using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace euler_oiler
{
    public class EulerSolver
    {
        /* 
            PROBLEM ONE
            If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
            The sum of these multiples is 23.

            Find the sum of all the multiples of 3 or 5 below 1000.
        */
        public string SolveProblemOne()
        {
            int sumTotal = 0;

            for (int i = 0; i <1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    sumTotal += i;
                }
            }

            return sumTotal.ToString();
        }

        /*
            Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        
            By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

            By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
            find the sum of the even-valued terms.
        */
        public string SolveProblemTwo()
        {
            int total = 0;
            int currentFibNum = 1;
            int previousFibNum = 0;

            while (currentFibNum < 4000000) {
                if (currentFibNum % 2 == 0)
                {
                    total += currentFibNum;
                }

                var oldPrevValue = previousFibNum;
                previousFibNum = currentFibNum;
                currentFibNum += oldPrevValue;
            }

            return total.ToString();
        }

        /*
            The prime factors of 13195 are 5, 7, 13 and 29.

            What is the largest prime factor of the number 600851475143 ?
        */
        public string SolveProblemThree()
        {
            long result = 0; 
            long currentDividend = 600851475143;

            result = MathHelper.GetHighestPrimeFactor(currentDividend);

            return result.ToString();
        }

        /*
            A palindromic number reads the same both ways. 
            The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

            Find the largest palindrome made from the product of two 3-digit numbers.
        */
        public string SolveProblemFour()
        {
            string result = "0";
            int max = 999;
            int min = 100;

            for (int i = 999; i >= 100; i--)
            {
                for (int j = max; j >= min; j--)
                {
                    var multipleString = (i * j).ToString();

                    if (multipleString.Length == 5)
                    {
                        if (multipleString[0] == multipleString[4] 
                            && multipleString[1] == multipleString[3])
                        {
                            if (int.Parse(result) < int.Parse(multipleString))
                            {
                                result = multipleString;
                                max = i;
                                min = j;
                            }
                            break;
                        }
                    }

                    if (multipleString.Length == 6)
                    {
                        if (multipleString[0] == multipleString[5] 
                            && multipleString[1] == multipleString[4] 
                            && multipleString[2] == multipleString[3])
                        {
                            if (int.Parse(result) < int.Parse(multipleString))
                            {
                                result = multipleString;
                                max = i;
                                min = j;
                            }
                            break;
                        }
                    }
                }
            }
            return result;
        }

        /*
            2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

            What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        */
        public string SolveProblemFive()
        {
            var result = string.Empty;
            var currentNum = 2520;

            var numbersToCheck = new List<int>() { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };

            while (result == string.Empty)
            {
                foreach (var num in numbersToCheck)
                {
                    if (currentNum % num != 0)
                    {
                        break;
                    }

                    if (num == numbersToCheck[numbersToCheck.Count() - 1])
                    {
                        result = currentNum.ToString();
                    }
                }
                
                currentNum++; 
            }

            return result;
        }
    }
}
